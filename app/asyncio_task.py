import asyncio
import datetime
from telethon import TelegramClient
from database.models import Account, Config
from function.config_function import ConFunc
from function.account_function import AccountFunc
from config import API_HASH, API_ID
from aiogram import Bot
from config import ADMIN
from function.custom_parser import CustomHTML

# --- —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ---
async def send_from_account(acc, text, interval):
    session_file = f"{acc.phone}.session"
    client = TelegramClient(session_file, API_ID, API_HASH)
    client.parse_mode = CustomHTML()
    await client.start()
    print(f"[{acc.phone}] –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")

    success_count = 0
    fail_count = 0
    failed_groups = []

    async for dialog in client.iter_dialogs():
        if dialog.is_group:
            try:
                await client.send_message(dialog.id, text, parse_mode='HTML')
                print(f"[{acc.phone}] ‚Üí {dialog.name}")
                success_count += 1
                await asyncio.sleep(interval)
            except Exception as e:
                error_text = str(e)
                print(f"[{acc.phone}] –û—à–∏–±–∫–∞ –≤ {dialog.name}: {error_text}")
                fail_count += 1
                failed_groups.append(f"{dialog.name} (@{getattr(dialog.entity, 'username', '–Ω–µ—Ç username')}): {error_text}")

    await client.disconnect()

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    return {
        "phone": acc.phone,
        "success": success_count,
        "fail": fail_count,
        "failed_groups": failed_groups
    }


# --- —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ---
async def start_broadcast(config, accounts,bot:Bot):
    tasks = [asyncio.create_task(send_from_account(acc, config.text, float(config.interval)))
             for acc in accounts]

    results = await asyncio.gather(*tasks)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á—ë—Ç
    report = "üìä <b>–û—Ç—á—ë—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ:</b>\n\n"
    for res in results:
        report += f"üì± <b>{res['phone']}</b>\n"
        report += f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {res['success']}\n"
        report += f"‚ùå –û—à–∏–±–æ–∫: {res['fail']}\n"
        if res['failed_groups']:
            report += "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤:\n"
            for g in res['failed_groups']:
                report += f"‚Ä¢ {g}\n"   # —É–±—Ä–∞–ª –ª–∏—à–Ω–∏–π @
        report += "\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –ø–æ –∫—É—Å–∫–∞–º
    MAX_LENGTH = 4000
    for admin_id in ADMIN:
        try:
            if len(report) > MAX_LENGTH:
                for i in range(0, len(report), MAX_LENGTH):
                    await bot.send_message(chat_id=admin_id,text=report[i:i+MAX_LENGTH],parse_mode='HTML')
            else:
                await bot.send_message(chat_id=admin_id,text=report,parse_mode='HTML')
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    #return report


# --- "—Å–ª–µ–¥–∏–ª–∫–∞ –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º" ---
async def scheduler(bot:Bot):
    while True:
        now = datetime.datetime.now().strftime("%H:%M")

        # –±–µ—Ä—ë–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        config = await ConFunc.get_config()

        if config and now == config.time:  # –µ—Å–ª–∏ –≤—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ
            print(f"‚è∞ –ù–∞—Å—Ç—É–ø–∏–ª–æ –≤—Ä–µ–º—è {config.time}, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É...")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º

            for admin_id in ADMIN:
                try:
                    await bot.send_message(chat_id=admin_id, text='üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞')
                except Exception as e:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

            # –±–µ—Ä—ë–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            accounts = await AccountFunc.get_all_accounts()

            if accounts:
                await start_broadcast(config, accounts,bot)
            else:
                print("‚ö†Ô∏è –ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")

            # –∂–¥—ë–º –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —Ç—É –∂–µ –º–∏–Ω—É—Ç—É
            await asyncio.sleep(60)
        else:
            await asyncio.sleep(10)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫

