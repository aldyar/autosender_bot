from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.fsm.context import FSMContext
from aiogram.utils.text_decorations import html_decoration
from database.requests import Func
from app.state import ConfigState
from app.telethon import login_telegram
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

user = Router()


@user.message(F.text == 'üë§ –ê–∫–∫–∞—É–Ω—Ç Telegram')
async def account_settings(message: Message,state:FSMContext):
    await state.clear()
    config = await Func.get_config()
    
    if config.api_id and config.api_hash and config.phone:
        text = (
            "üë§ <b>–¢–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b>\n"
            f"‚Ä¢ <b>API ID:</b> <code>{config.api_id}</code>\n"
            f"‚Ä¢ <b>API Hash:</b> <code>{config.api_hash}</code>\n"
            f"‚Ä¢ <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{config.phone}</code>\n\n"
            "üîß –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?"
        )
    else:
        text = "‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n\n–ù–∞–∂–º–∏ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª, —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ."

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', callback_data='change_account')]
    ])
    
    await message.answer(text, parse_mode="HTML", reply_markup=kb)


@user.callback_query(F.data == 'change_account')
async def change_account_start(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.answer("üîê –í–≤–µ–¥–∏—Ç–µ <b>API ID</b>:", parse_mode="HTML")
    await state.set_state(ConfigState.wait_api_id)


@user.message(ConfigState.wait_api_id)
async def get_api_id(message: Message, state: FSMContext):
    await state.update_data(api_id=int(message.text))
    await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ <b>API Hash</b>:", parse_mode="HTML")
    await state.set_state(ConfigState.wait_api_hash)


@user.message(ConfigState.wait_api_hash)
async def get_api_hash(message: Message, state: FSMContext):
    await state.update_data(api_hash=message.text.strip())
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXX:", parse_mode="HTML")
    await state.set_state(ConfigState.wait_phone)


@user.message(ConfigState.wait_phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())

    data = await state.get_data()

    status, client = await login_telegram(data['api_id'], data['api_hash'], data['phone'])

    if status == 'code_required':
        await state.update_data(client=client)
        await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b> –∏–∑ Telegram:", parse_mode="HTML")
        await state.set_state(ConfigState.wait_code)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        await state.clear()


@user.message(ConfigState.wait_code)
async def get_code(message: Message, state: FSMContext):
    data = await state.get_data()

    status, _ = await login_telegram(
        data['api_id'], data['api_hash'], data['phone'],
        code=message.text.strip()
    )

    if status == 'ok':
        await Func.save_config(data)
        await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        await state.clear()
    elif status == 'invalid_code':
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        await state.clear()

