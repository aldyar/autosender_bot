from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.fsm.context import FSMContext
from aiogram.utils.text_decorations import html_decoration
from database.requests import Func
from app.state import ConfigState
from app.telethon import send_bulk,is_session_active
from aiogram import Bot
from app import state

user = Router()


@user.message(F.text == 'üì§ –†–∞—Å—Å—ã–ª–∫–∞')
async def sender_handler(message: Message,state:FSMContext):
    await state.clear()
    config = await Func.get_config()
    groups = await Func.get_groups()

    if not config or not config.api_id or not config.api_hash or not config.phone:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n–î–æ–±–∞–≤—å—Ç–µ Telegram-–∞–∫–∫–∞—É–Ω—Ç.")
        return

    # # üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
    # session_ok = await is_session_active(config)
    # if not session_ok:
    #     await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è Telegram –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —Å–ª–µ—Ç–µ–ª–∞.\n–ó–∞–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
    #     return
    
    group_count = len(groups)
    text = config.text or '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'
    interval = f"{config.interval} —Å–µ–∫." if config.interval else "‚ùå –Ω–µ –∑–∞–¥–∞–Ω"
    time = config.time or "‚ùå –Ω–µ –∑–∞–¥–∞–Ω"
    active = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if config.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    lap_count = config.lap_count or 1
    lap_display = "‚àû" if lap_count == 1000 else str(lap_count)

    msg = (
        f"<b>üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"üìù –¢–µ–∫—Å—Ç:\n{text}\n"
        f"üìÇ –ì—Ä—É–ø–ø: <b>{group_count}</b>\n"
        f"üîÅ –ö—Ä—É–≥–æ–≤: <b>{lap_display}</b>\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{interval}</b>\n"
        f"üï∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: <b>{time}</b>\n"
        f"üë§ –ê–∫–∫–∞—É–Ω—Ç: <code>{config.phone}</code>\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: <b>{active}</b>"
    )

    await message.answer(msg, parse_mode="HTML", reply_markup=kb.sender_menu(config.is_active))


@user.callback_query(F.data == 'toggle_sender')
async def toggle_sender(query: CallbackQuery,state:FSMContext):
    await query.message.delete()
    config = await Func.get_config()
    new_status = not config.is_active

    await Func.set_active_status(new_status)

    status = "üü¢ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if new_status else "üî¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    await query.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ {status}")
    await sender_handler(query.message,state)



@user.callback_query(F.data == 'start_manual')
async def start_manual_sender(query: CallbackQuery,bot:Bot):

    if state.IS_SENDING:
        await query.answer("‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∏–¥—ë—Ç. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è.", show_alert=True)
        return
    
    config = await Func.get_config()
    groups = await Func.get_groups()

    if not config.is_active:
        await query.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    if not config.text or not groups:
        await query.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç–æ–π.", show_alert=True)
        return

    await query.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

    result = await send_bulk(config, groups,bot)
    await query.message.answer(
        f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{result['success']}</b>\n‚ùå –û—à–∏–±–æ–∫: <b>{result['failed']}</b>",
        parse_mode="HTML"
    )

@user.callback_query(F.data == 'setlap')
async def set_lap_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üîÅ *–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
        "‚Äî –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç `1` –∏ –≤—ã—à–µ\n"
        "‚Äî –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ `‚àû`, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Ü–∏–∫–ª–∏—á–Ω–æ–π (—É—Å–ª–æ–≤–Ω–æ 1000 –∫—Ä—É–≥–æ–≤)",
        parse_mode='Markdown'
    )
    await state.set_state(ConfigState.wait_lap_count)
    await callback.answer()


@user.message(ConfigState.wait_lap_count)
async def process_lap_count(message: Message, state: FSMContext):
    input_text = message.text.strip()

    if input_text == "‚àû":
        lap_count = 1000
    else:
        if not input_text.isdigit():
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ `‚àû`.")
            return
        lap_count = int(input_text)
        if lap_count < 1:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1.")
            return

    await Func.set_lap_count(lap_count)

    await message.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä—É–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {input_text}")
    await state.clear()


@user.callback_query(F.data == 'stop_manual')
async def stop_manual_sender(query: CallbackQuery, bot: Bot):
    if not state.IS_SENDING:
        await query.answer("‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    state.IS_SENDING = False
    await query.answer("üõë –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ 5-10 —Å–µ–∫—É–Ω–¥...", show_alert=True)