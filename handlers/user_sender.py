from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.fsm.context import FSMContext
from aiogram.utils.text_decorations import html_decoration
from database.requests import Func
from app.state import ConfigState
from app.telethon import send_bulk,is_session_active
from aiogram import Bot

user = Router()


@user.message(F.text == 'üì§ –†–∞—Å—Å—ã–ª–∫–∞')
async def sender_handler(message: Message,state:FSMContext):
    await state.clear()
    config = await Func.get_config()
    groups = await Func.get_groups()

    if not config or not config.api_id or not config.api_hash or not config.phone:
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.\n–î–æ–±–∞–≤—å—Ç–µ Telegram-–∞–∫–∫–∞—É–Ω—Ç.")
        return

    # üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
    session_ok = await is_session_active(config)
    if not session_ok:
        await message.answer("‚ö†Ô∏è –°–µ—Å—Å–∏—è Telegram –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —Å–ª–µ—Ç–µ–ª–∞.\n–ó–∞–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ –∞–∫–∫–∞—É–Ω—Ç.")
        return
    
    group_count = len(groups)
    text = config.text or '‚ùå –Ω–µ –∑–∞–¥–∞–Ω'
    interval = f"{config.interval} —Å–µ–∫." if config.interval else "‚ùå –Ω–µ –∑–∞–¥–∞–Ω"
    time = config.time or "‚ùå –Ω–µ –∑–∞–¥–∞–Ω"
    active = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if config.is_active else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"

    msg = (
        f"<b>üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"üìù –¢–µ–∫—Å—Ç:\n" 
        f"{text}\n"
        f"üìÇ –ì—Ä—É–ø–ø: <b>{group_count}</b>\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{interval}</b>\n"
        f"üï∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: <b>{time}</b>\n"
        f"üë§ –ê–∫–∫–∞—É–Ω—Ç: <code>{config.phone}</code>\n"
        f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: <b>{active}</b>"
    )

    await message.answer(msg, parse_mode="HTML", reply_markup=kb.sender_menu(config.is_active))


@user.callback_query(F.data == 'toggle_sender')
async def toggle_sender(query: CallbackQuery,state:FSMContext):
    await query.message.delete()
    config = await Func.get_config()
    new_status = not config.is_active

    await Func.set_active_status(new_status)

    status = "üü¢ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if new_status else "üî¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    await query.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ {status}")
    await sender_handler(query.message,state)



@user.callback_query(F.data == 'start_manual')
async def start_manual_sender(query: CallbackQuery,bot:Bot):
    config = await Func.get_config()
    groups = await Func.get_groups()

    if not config.is_active:
        await query.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.", show_alert=True)
        return

    if not config.text or not groups:
        await query.answer("‚ö†Ô∏è –¢–µ–∫—Å—Ç –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—É—Å—Ç–æ–π.", show_alert=True)
        return

    await query.answer("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

    result = await send_bulk(config, groups,bot)
    await query.message.answer(
        f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{result['success']}</b>\n‚ùå –û—à–∏–±–æ–∫: <b>{result['failed']}</b>",
        parse_mode="HTML"
    )
