from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.fsm.context import FSMContext
from aiogram.utils.text_decorations import html_decoration
from config import API_ID,API_HASH
from function.config_function import ConFunc
from function.account_function import AccountFunc
from app.state import ConfigState
from function.telethon import Telethon
from app.asyncio_task import start_broadcast
from function.custom_parser import CustomHTML, CustomMarkdown
from telethon import TelegramClient

user = Router()


@user.callback_query(F.data == 'add_account')
async def add_phone(callback:CallbackQuery,state:FSMContext):
    await callback.message.answer("üì± –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ +XXXXXXXXXXX:", parse_mode="HTML")
    await state.set_state(ConfigState.wait_phone)
    await callback.answer()


@user.message(ConfigState.wait_phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text.strip())

    data = await state.get_data()

    status, client = await Telethon.login_telegram(API_ID, API_HASH, data['phone'])

    if status == 'code_required':
        await state.update_data(client=client)
        await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</b> –∏–∑ Telegram:", parse_mode="HTML")
        await state.set_state(ConfigState.wait_code)
    elif status == 'email_required':
        await message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ email –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –±–æ—Ç–∞.")
        await state.clear()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        await state.clear()


@user.message(ConfigState.wait_code)
async def get_code(message: Message, state: FSMContext):
    data = await state.get_data()
    phone = data['phone']
    status, _ = await Telethon.login_telegram(
        API_ID, API_HASH, data['phone'],
        code=message.text.strip()
    )

    if status == 'ok':
        await AccountFunc.save_account(phone)
        await message.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        await state.clear()
    elif status == 'invalid_code':
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        await state.clear()


@user.callback_query(F.data == 'account_list')
async def account_list(callback:CallbackQuery,state:FSMContext):
    accounts = await AccountFunc.get_all_accounts()  # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤

    if not accounts:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
        return

    # –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω—ã
    text = "üì± –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤:\n\n"
    text += "\n".join(f"‚Ä¢ `{acc.phone}`" for acc in accounts)

    await callback.message.answer(text,parse_mode='Markdown',reply_markup=kb.inline_delete_button)
    await callback.answer()

@user.callback_query(F.data == 'delete_acc')
async def delete_account(callback:CallbackQuery,state:FSMContext):
    await callback.answer()
    await callback.message.answer('*–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–æ–º–µ—Ä –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å*',parse_mode='Markdown')
    await state.set_state(ConfigState.delete_account)


@user.message(ConfigState.delete_account)
async def process_delete(message:Message,state:FSMContext):
    acc = message.text
    try:
        await AccountFunc.delete_account(acc)
        await message.answer(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {acc} –∏ –µ–≥–æ —Å–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç {acc}\n–û—à–∏–±–∫–∞: {e}")
    
    await state.clear()
    print('–∑–∞—à–µ–ª')


########################################################################################################################
########################################################################################################################
########################################################################################################################


@user.message(F.text == 'test')
async def test(message:Message):
    config = await ConFunc.get_config()
    accounts = await AccountFunc.get_all_accounts()
    print('–¥–æ—à–µ–ª —Å—é–¥–∞')
    task = await start_broadcast(config,accounts)
    #await message.answer(task, parse_mode="HTML")



@user.message(F.text == 'tele')
async def test(message: Message):
    # --- –≤—Ä—É—á–Ω—É—é —É–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---
    API_ID = 123          # <- —Ç–≤–æ–π API_ID
    API_HASH = '123' # <- —Ç–≤–æ–π API_HASH
    SESSION = '+123.session'   # <- –∏–º—è —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏ (—Å–æ–∑–¥–∞—Å—Ç—Å—è .session)

    # –°–æ–∑–¥–∞–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
    client = TelegramClient(SESSION, API_ID, API_HASH)
    client.parse_mode = CustomHTML()  # –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π Markdown

    await client.start()
    print("Telethon client started")

    #await client(JoinChannelRequest('@autosenderr2'))
    # –¢–µ–∫—Å—Ç —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —ç–º–æ–¥–∑–∏ –∏ —Å–ø–æ–π–ª–µ—Ä–æ–º
    text = """
<b>–£—Å—Ç–∞–ª –∏—Å–∫–∞—Ç—å –∫–∞—Ä—Ç—ã?</b><b><tg-emoji emoji-id="5393498271073185899">üßê</tg-emoji></b><b>
–ò—Ö —É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å, —É –Ω–∞—Å –≤—Å—ë –µ—Å—Ç—å!!!</b><tg-emoji emoji-id="5255881578969574929">üëç</tg-emoji>

<u>–î–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–¥:</u>
<tg-emoji emoji-id="5224257782013769471">üí∞</tg-emoji>–ë–µ–ª–æ–µ
<tg-emoji emoji-id="5224257782013769471">üí∞</tg-emoji>–°–µ—Ä–æ–µ
<tg-emoji emoji-id="5224257782013769471">üí∞</tg-emoji>–ß–µ—Ä–Ω–æ–µ

<tg-emoji emoji-id="5267300544094948794">üí≥</tg-emoji><b>–ü—Ä–µ–º–∏—É–º –°–±–µ—Ä–±–∞–Ω–∫ </b>
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –°–±–µ—Ä
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –í–¢–ë 
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –¢-–ë–∞–Ω–∫ 
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ê–ª—å—Ñ–∞ –±–∞–Ω–∫ 
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ì–∞–∑–ø—Ä–æ–º
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ü—Ä–æ–º—Å–≤—è–∑—å
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –°–æ–≤–∫–æ–º
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ó–µ–Ω–∏—Ç
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ê–ö –ë–∞—Ä—Å
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ú–¢–°
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ü–æ—á—Ç–∞ –±–∞–Ω–∫ 
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –£—Ä–∞–ª—Å–∏–±
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –†–æ—Å—Å–µ–ª—å—Ö–æ–∑

<b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:</b>
- –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ 
- –°–∏–º-–∫–∞—Ä—Ç–∞
- –î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É 
- –ü–∞—Å–ø–æ—Ä—Ç/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è 
- –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
- –ü–∏–Ω –∫–æ–¥

<i>... —Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –õ–ö (–±–µ–∑ –¥–µ–±–µ—Ç–æ–≤–∫–∏)</i>
"""
    text2 = """
<b>test</b>
<i>test</i>
<blockquote>test</blockquote>
<pre>test</pre>
"""
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç "me"
    await client.send_message('@autosenderr2', text)
    print("Message sent!")

    await client.disconnect()
    await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telethon!")





@user.message(F.text =='antest')
async def anum_test(message:Message):
    text = """
<b>–£—Å—Ç–∞–ª –∏—Å–∫–∞—Ç—å –∫–∞—Ä—Ç—ã?</b><b><tg-emoji emoji-id="5393498271073185899">üßê</tg-emoji></b><b>
–ò—Ö —É–∂–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å, —É –Ω–∞—Å –≤—Å—ë –µ—Å—Ç—å!!!</b><tg-emoji emoji-id="5255881578969574929">üëç</tg-emoji>

<u>–î–µ–±–µ—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã –ø–æ–¥:</u>
<tg-emoji emoji-id="5224257782013769471">üí∞</tg-emoji>–ë–µ–ª–æ–µ
<tg-emoji emoji-id="5224257782013769471">üí∞</tg-emoji>–°–µ—Ä–æ–µ
<tg-emoji emoji-id="5224257782013769471">üí∞</tg-emoji>–ß–µ—Ä–Ω–æ–µ

<tg-emoji emoji-id="5267300544094948794">üí≥</tg-emoji><b>–ü—Ä–µ–º–∏—É–º –°–±–µ—Ä–±–∞–Ω–∫ </b>
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –°–±–µ—Ä
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –í–¢–ë 
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –¢-–ë–∞–Ω–∫ 
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ê–ª—å—Ñ–∞ –±–∞–Ω–∫ 
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ì–∞–∑–ø—Ä–æ–º
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ü—Ä–æ–º—Å–≤—è–∑—å
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –°–æ–≤–∫–æ–º
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ó–µ–Ω–∏—Ç
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ê–ö –ë–∞—Ä—Å
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ú–¢–°
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –ü–æ—á—Ç–∞ –±–∞–Ω–∫ 
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –£—Ä–∞–ª—Å–∏–±
<tg-emoji emoji-id="5472250091332993630">üí≥</tg-emoji> –†–æ—Å—Å–µ–ª—å—Ö–æ–∑

<b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:</b>
- –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ 
- –°–∏–º-–∫–∞—Ä—Ç–∞
- –î–æ—Å—Ç—É–ø –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É 
- –ü–∞—Å–ø–æ—Ä—Ç/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è 
- –ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
- –ü–∏–Ω –∫–æ–¥

<i>... —Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –õ–ö (–±–µ–∑ –¥–µ–±–µ—Ç–æ–≤–∫–∏)</i>
"""


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    await message.answer(text,parse_mode='HTML')