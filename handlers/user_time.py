from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.fsm.context import FSMContext
from aiogram.utils.text_decorations import html_decoration
from database.requests import Func
from app.state import ConfigState
from aiogram.filters import StateFilter

user = Router()


@user.message(F.text == '‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏')
async def interval_message(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(ConfigState.wait_interval)
    await message.answer("‚è± –í–≤–µ–¥–∏—Ç–µ *–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö* –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `5`):", parse_mode="Markdown",reply_markup=kb.back_button)

@user.message(ConfigState.wait_interval)
async def save_interval(message: Message, state: FSMContext):
    try:
        interval = float(message.text.strip())
        if interval <= 0:
            raise ValueError
        await Func.set_interval(interval)
        await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{interval} —Å–µ–∫*", parse_mode="Markdown",reply_markup=kb.main_menu)
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `3.5`)", parse_mode="Markdown")


@user.message(F.text == 'üï∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞')
async def start_time(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(ConfigState.wait_time)
    await message.answer("üï∞ –í–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏* –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `14:30`):", parse_mode="Markdown",reply_markup=kb.back_button)

@user.message(ConfigState.wait_time)
async def save_start_time(message: Message, state: FSMContext):
    time_text = message.text.strip()
    import re
    if re.match(r'^\d{1,2}:\d{2}$', time_text):
        await Func.set_time(time_text)
        await message.answer(f"‚úÖ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *{time_text}*", parse_mode="Markdown",reply_markup=kb.main_menu)
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ: `08:30`", parse_mode="Markdown")