from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
import app.keyboards as kb
from aiogram.fsm.context import FSMContext
from aiogram.utils.text_decorations import html_decoration
#from config import ADMIN
from function.config_function import ConFunc
from app.state import ConfigState

user = Router()

@user.message(CommandStart())
async def cmd_start(message:Message,state:FSMContext):
    await menu(message,state)


@user.message(F.text == '‚ùå –û—Ç–º–µ–Ω–∞')
async def menu(message:Message,state:FSMContext):
    await state.clear()
    config = await ConFunc.get_config()
    keyboard = kb.main_menu(config.is_active)
     # –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ ‚Üí –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏
    text = config.text if config.text else "‚ùå –¢–µ–∫—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    time = config.time if config.time else "‚ùå –í—Ä–µ–º—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    interval = config.interval if config.interval else "‚ùå –ò–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if config.is_active else "‚õî –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"

    response = (
        f"üì© –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥:\n\n"
        f"üìù –¢–µ–∫—Å—Ç:\n {text}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time}\n"
        f"üîÑ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval}\n"
        f"‚ö°Ô∏è –°—Ç–∞—Ç—É—Å: {status}"
    )

    await message.answer(response,reply_markup=keyboard,parse_mode='HTML')

@user.callback_query(F.data == 'toggle_sender')
async def toggle_sender(query: CallbackQuery,state:FSMContext):
    
    config = await ConFunc.get_config()
    new_status = not config.is_active

    await ConFunc.set_active_status(new_status)

    status = "üü¢ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if new_status else "üî¥ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
    await query.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ {status}")
    await query.message.delete()
    await menu(query.message,state)


@user.callback_query(F.data == 'change_text')
async def text_handler(message:CallbackQuery,state:FSMContext):
    await state.clear()
    await state.set_state(ConfigState.wait_text)
    await message.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ *–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏*:", parse_mode="Markdown",reply_markup=kb.back_button)
    await message.answer()


@user.message(ConfigState.wait_text)
async def wait_text_handler(message:Message,state:FSMContext):
    text = html_decoration.unparse(message.text, message.entities)
    await ConFunc.set_text(text)
    await state.clear()
    await message.answer('*‚úÖ –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω*',parse_mode='Markdown')


@user.callback_query(F.data == 'change_interval')
async def interval_message(message: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(ConfigState.wait_interval)
    await message.message.answer("‚è± –í–≤–µ–¥–∏—Ç–µ *–∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö* –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `5`):", parse_mode="Markdown",reply_markup=kb.back_button)
    await message.answer()


@user.message(ConfigState.wait_interval)
async def save_interval(message: Message, state: FSMContext):
    try:
        interval = float(message.text.strip())
        if interval <= 0:
            raise ValueError
        await ConFunc.set_interval(interval)
        await message.answer(f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{interval} —Å–µ–∫*", parse_mode="Markdown")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `3.5`)", parse_mode="Markdown")


@user.callback_query(F.data == 'set_time')
async def start_time(message: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.set_state(ConfigState.wait_time)
    await message.message.answer("üï∞ –í–≤–µ–¥–∏—Ç–µ *–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏* –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `14:30`):", parse_mode="Markdown",reply_markup=kb.back_button)
    await message.answer()


@user.message(ConfigState.wait_time)
async def save_start_time(message: Message, state: FSMContext):
    time_text = message.text.strip()
    import re
    if re.match(r'^\d{1,2}:\d{2}$', time_text):
        await ConFunc.set_time(time_text)
        await message.answer(f"‚úÖ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: *{time_text}*", parse_mode="Markdown")
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ: `08:30`", parse_mode="Markdown")


