from telethon import TelegramClient
from telethon.errors import PhoneCodeInvalidError,PhoneCodeExpiredError
from telethon.errors import RPCError
import asyncio
from telethon.errors import RPCError, ChatWriteForbiddenError, UserAlreadyParticipantError
from telethon.tl.functions.channels import JoinChannelRequest


code_hashes = {}

class Telethon:
    

    async def login_telegram(api_id, api_hash, phone, code=None):
        client = TelegramClient(phone, api_id, api_hash)
        await client.connect()

        if not await client.is_user_authorized():
            if code is None:
                sent = await client.send_code_request(phone)

                # üîé –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—á–∞—Ç–∞–µ–º –≤—Å—ë, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å
                print("=== SEND CODE REQUEST ===")
                print("Type:", sent.type)           # –ö—É–¥–∞ –ø—Ä–∏–¥—ë—Ç (app, sms, call)
                print("Timeout:", sent.timeout)     # –°–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
                print("Phone hash:", sent.phone_code_hash)

                if type(sent.type).__name__ == 'SentCodeTypeSetUpEmailRequired':
                    # –ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                    print(f"‚ùå –ê–∫–∫–∞—É–Ω—Ç {phone} —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ email. –ù–µ–ª—å–∑—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å.")
                    await client.disconnect()
                    return "email_required", None  # –∏–ª–∏ client, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º phone_code_hash
                code_hashes[phone] = sent.phone_code_hash
                return "code_required", client

            phone_code_hash = code_hashes.get(phone)
            if not phone_code_hash:
                return "missing_hash", client

            try:
                await client.sign_in(phone=phone, code=code, phone_code_hash=phone_code_hash)
            except PhoneCodeInvalidError:
                return "invalid_code", client
            except PhoneCodeExpiredError:
                return "code_expired", client
            except Exception as e:
                print("Unexpected error:", e)
                return "unexpected_error", client

        await client.disconnect()  # –ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º
        return "ok", client
